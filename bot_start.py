import asyncio

import aiosqlite

import aiocron
import logging

from datetime import datetime

from aiogram.types import BotCommand
from aiogram.utils import executor
from aiogram.utils.exceptions import ChatNotFound, BotBlocked

from usefultools.create_bot import bot, dp
from database.user_db_select import UserDBSelect, UserDB
from database.user_db_insert import UserDBInsert
from database.db_select import SelectQuery
from reports.report_24h import get_daily_report
from reports.report_blitz import get_blitz_report
from reports.report_wallets import WalletsReport

from handlers import admins, main, commands, addrs_monitoring


logging.basicConfig(format='%(asctime)s [%(levelname)s] %(message)s', level=logging.INFO)


@aiocron.crontab('1 5,12,20 * * *')
# @aiocron.crontab('*/1 * * * *')
async def send_blitz_report():
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    logging.info(f"Send BLITZ report at {datetime.now()}")
    report_text_ru = await get_blitz_report()
    admins = await UserDBSelect().select_admins_subscribe()
    for user in admins:
        try:
            await bot.send_message(chat_id=user, text=report_text_ru,
                                   parse_mode='HTML')
        except ChatNotFound as err:
            logging.warning(err)
        except BotBlocked as err:
            logging.warning(err)


@aiocron.crontab('10 11,23 * * *')
# @aiocron.crontab('*/1 * * * *')
async def send_daily_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
    logging.info(f"Send DAILY report at {datetime.now()}")
    report_text_ru = await get_daily_report()
    users_subscribe = await UserDBSelect().select_subscribe_users()
    try:  # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
        await UserDBInsert().insert_daily_reports(message=report_text_ru)
    except aiosqlite.IntegrityError as err:
        logging.error(err)
    last_report_id = await UserDBSelect().select_daily_report_id()
    for user in users_subscribe:
        try:
            await bot.send_message(chat_id=user, text=report_text_ru,
                                   parse_mode='HTML')
            try:  # –æ—Ç–º–µ—á–∞–µ–º —Ñ–ª–∞–≥–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                await UserDBInsert().insert_send_daily_report(user_id=user, report_id=last_report_id)
            except aiosqlite.IntegrityError as err:
                logging.error(err)
        except ChatNotFound as err:
            logging.warning(err)
            try:  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                await UserDBInsert().insert_inactive_users(user_id=user)
            except aiosqlite.IntegrityError as err:
                logging.error(err)
        except BotBlocked as err:
            logging.warning(err)
            try:  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                await UserDBInsert().insert_inactive_users(user_id=user)
            except aiosqlite.IntegrityError as err:
                logging.error(err)


# @aiocron.crontab('* * * * * */20')
# async def send_weekly_report():
#     logging.info(f"Send WEEKLY report at {datetime.now()}")
#     print('WEEKLY report!')
#
#
# @aiocron.crontab('* * * * * */30')
# async def send_monthly_report():
#     logging.info(f"Send MONTHLY report at {datetime.now()}")
#     print('MONTHLY report!')


@aiocron.crontab('*/2 * * * *')
# @aiocron.crontab('* * * * * */15')
async def addrs_monitoring():
    """–ò–∑ –ë–î —Å —Å–æ–±—Ä–∞–Ω–æ–π –∏–Ω—Ñ–æ–π –ø–µ—Ä–µ–Ω–æ—Å–∏ –≤ –ë–î Users –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞
    –Ω–∞–±–ª—é–¥–∞–µ–º—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏."""
    addrs_monitor_list = await UserDBSelect().select_addrs_monitoring()  # –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if addrs_monitor_list:
        for addr in addrs_monitor_list:
            # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ü–†–û–î–ê–ñ–ê–ú –∏–∑ –ë–î —Å —Å–æ–±—Ä–∞–Ω–æ–π –∏–Ω—Ñ–æ–π
            async for sales_data_insert in SelectQuery().select_for_sales_monitoring(owner_addr=addr):
                if sales_data_insert:  # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å, —Ç–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Ö –≤ –ë–î users
                    try:
                        await UserDBInsert().insert_sales_monitoring(sales_data_insert)
                    except aiosqlite.IntegrityError as err:
                        logging.error(f"SALES data not insert - {err}")
                else:
                    logging.info('No SALES DATA to address monitoring')
            # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ü–û–ö–£–ü–ö–ê–ú –∏–∑ –ë–î —Å —Å–æ–±—Ä–∞–Ω–æ–π –∏–Ω—Ñ–æ–π
            async for buys_data_insert in SelectQuery().select_for_buys_monitoring(owner_addr=addr):
                if buys_data_insert:
                    try:
                        await UserDBInsert().insert_buys_monitoring(buys_data_insert)
                    except aiosqlite.IntegrityError as err:
                        logging.warning(f"BUYS data not insert - {err}")
                else:
                    logging.info('No BUYS DATA to address monitoring')


async def send_bot_msg_about_action(user_id: int, msg: str,
                                    action: str, monitor_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –Ω–∞ –∫–æ—à–µ–ª—å–∫–∞—Ö"""
    try:
        await bot.send_message(chat_id=user_id, text=msg,
                               parse_mode='HTML')  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
        try:  # –≤ —Ç–∞–±–ª–∏—Ü—É send_monitor_info –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await UserDBInsert().insert_send_monitor_info(user_id=user_id, monitor_id=monitor_id,
                                                          action=action)
        except aiosqlite.IntegrityError as err:
            logging.error(err)
    except ChatNotFound as err:
        logging.warning(err)
        try:  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            await UserDBInsert().insert_inactive_users(user_id=user_id)
            logging.info(f"Inactive User {user_id}")
        except aiosqlite.IntegrityError as err:
            logging.error(err)
    except BotBlocked as err:
        logging.warning(err)
        try:  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            await UserDBInsert().insert_inactive_users(user_id=user_id)
            logging.info(f"User {user_id} block bot")
        except aiosqlite.IntegrityError as err:
            logging.error(err)


@aiocron.crontab('*/2 * * * *')
# @aiocron.crontab('* * * * * */20')
async def send_actions_monitor_info():
    """–ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ü–û–ö–£–ü–ö–ê–•"""
    sales_monitor_ids = await UserDBSelect().select_no_send_sales_monitor_id()  # id –Ω–µ–æ—Ç—Ä–ø–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–ø—Ä–æ–¥–∞–∂)
    buys_monitor_ids = await UserDBSelect().select_no_send_buys_monitor_id()  # id –Ω–µ–æ—Ç—Ä–ø–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–ü–û–ö–£–ü–ö–ò)
    addrs_monitor_list = await UserDBSelect().select_addrs_monitoring()  # –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    for addr in addrs_monitor_list:
        # —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π, –∫–æ—Ç.—Å–ª–µ–¥—è—Ç –∑–∞ —ç—Ç–∏–º –∞–¥—Ä–µ—Å–æ–º
        users = await UserDBSelect().select_users_monitoring(addr_monitor=addr)
        if sales_monitor_ids:
            for monitor_id in sales_monitor_ids:
                # —Ç—É—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                sales_output_msg = await WalletsReport().wallet_sales_report(owner_addr=addr,
                                                                             monitor_id=monitor_id)
                if sales_output_msg:
                    logging.info(f"New sales report from wallet {addr}")
                    for user in users:
                        await send_bot_msg_about_action(user_id=user, msg=sales_output_msg,
                                                        action='sale', monitor_id=monitor_id)
        if buys_monitor_ids:
            for monitor_id in buys_monitor_ids:
                # —Ç—É—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                buys_output_msg = await WalletsReport().wallet_buys_report(owner_addr=addr,
                                                                           monitor_id=monitor_id)
                if buys_output_msg:
                    logging.info(f"New BUYS report from wallet {addr}")
                    for user in users:
                        await send_bot_msg_about_action(user_id=user, msg=buys_output_msg,
                                                        action='buy', monitor_id=monitor_id)


async def on_startup(_):
    try:
        await UserDB().create_tables()  # —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π
    except:
        logging.error("Create users tables ERROR!")
    text_ru = f"#restart_bot\n\n" \
              f"ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è."
    admins_list = await UserDBSelect().select_admins()
    for admin in admins_list:
        try:
            await bot.send_message(chat_id=admin, text=text_ru)
        except ChatNotFound as err:
            logging.warning(err)
        except BotBlocked as err:
            logging.warning(err)
    menu_commands = [
        BotCommand(command='/bot_menu',
                   description='–º–µ–Ω—é –ë–æ—Ç–∞'),
        BotCommand(command='/cancel',
                   description='–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è')
    ]
    await bot.set_my_commands(menu_commands)


async def on_shutdown(_):
    text_ru = f"#shutdown_bot\n\n" \
           f"ü§ñ –ë–æ—Ç —É–ø–∞–ª..."
    admins_list = await UserDBSelect().select_admins()
    for admin in admins_list:
        try:
            await bot.send_message(chat_id=admin, text=text_ru)
        except ChatNotFound as err:
            logging.warning(err)
        except BotBlocked as err:
            logging.warning(err)


if __name__ == "__main__":
    executor.start_polling(dp, timeout=120, skip_updates=True,
                           on_startup=on_startup, on_shutdown=on_shutdown)
